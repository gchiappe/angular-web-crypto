/*
ngWebCrypto
---
The MIT License (MIT)

copyright ©2016 Giancarlo A. Chiappe Aguilar

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in 
the Software without restriction, including without limitation the rights to 
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies 
of the Software, and to permit persons to whom the Software is furnished to do 
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all 
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
SOFTWARE.
---
©2016 Giancarlo Chiappe Aguilar <gchiappe@outlook.com.pe>
*/
"use strict";var NgWebCryptoUtils=function(){function e(){this.ABtoString=function(e){for(var n="",t=0;t<e.byteLength;t++)n+=String.fromCharCode(e[t]);return n},this.StringtoAB=function(e){for(var n=new Uint8Array(e.length),t=0;t<e.length;t++)n[t]=e.charCodeAt(t);return n},this.isFunction=function(e){return!!(e&&e.constructor&&e.call&&e.apply)},this.isDefined=function(e){return"undefined"!=typeof e&&null!==e},this.ABToHS=function(e){if(!e)return"";for(var n="",t=0;t<e.length;t++){var r=(255&e[t]).toString(16);r=1===r.length?"0"+r:r,n+=r}return n.toUpperCase()},this.HSToAB=function(e){if(!e)return new Uint8Array;for(var n=[],t=0,r=e.length;t<r;t+=2)n.push(parseInt(e.substr(t,2),16));return new Uint8Array(n)}}return e}(),webCryptoConstants={classes:{ECDH:"ECDH",AESGCM:"AES-GCM"},namedCurve:{P256:"P-256"},format:{RAW:"raw",JWK:"jwk"}};angular.module("ngWebCrypto",[]),angular.module("ngWebCrypto").provider("$webCrypto",["$injector",function(e){var n=this,t=window.crypto;if(!t.subtle)throw"ng-web-crypto: browser not supported.";var r=e.instantiate(NgWebCryptoUtils),i=[],o=[],a=function(e){for(var n=0;n<i.length;n++)if(i[n].name==e)return i[n];return-1},u=function(e){for(var n=0;n<o.length;n++)if(o[n].name==e)return o[n];return-1},s=null,f=null;this.generateKey=function(e){if(r.isDefined(e.random)&&e.random&&(e.name=r.ABToHS(t.getRandomValues(new Uint8Array(12)))),!r.isDefined(e.name))throw"key name is required for generating.";if(a(e.name)!=-1)throw e.name,'" already in use.';if(r.isDefined(e.namedCurve)||(e.namedCurve="P-256"),r.isDefined(e.type)||(e.type="private"),"private"!=e.type&&"public"!=e.type&&"mixed"!=e.type)throw"invalid key type (private, public, mixed).";var n=new Promise(function(n,o){t.subtle.generateKey({name:"ECDH",namedCurve:e.namedCurve},!0,["deriveKey","deriveBits"]).then(function(u){t.subtle.exportKey("jwk",u.publicKey).then(function(f){t.subtle.exportKey("raw",u.publicKey).then(function(t){i.push({class:"ECDH",type:e.type,name:e.name,key:u,jwk:f,raw:t}),a(e.name)!=-1?(r.isDefined(s)||(s=e.name),n(e.name)):o("key was not added to storage.")})})}).catch(function(e){o(e)})});return n.success=function(e){return n.then(function(n){e(n)}),n},n.error=function(e){return n.then(null,function(n){e(n)}),n},n},this.getDefaultKeys=function(){return{ecdh:s,crypto:f}},this.checkKey=function(e){return a(e)!=-1},this.checkCryptoKey=function(e){return u(e)!=-1},this.importKey=function(e){if(!r.isDefined(e.name))throw"key name is required for importing.";if(n.checkKey(e.name))throw e.name,'" already in use.';r.isDefined(e.class)||(e.class=webCryptoConstants.classes.ECDH),r.isDefined(e.crv)||(e.crv=webCryptoConstants.namedCurve.P256),r.isDefined(e.format)||(e.format=webCryptoConstants.format.JWK),r.isDefined(e.type)||(e.type="public");var o=void 0,u=[];if(e.format==webCryptoConstants.format.JWK){if(!r.isDefined(e.x)||!r.isDefined(e.y)||!r.isDefined(e.d))throw"x, y and d parameters are required to import an ECDH key.";o={kty:"EC",crv:e.crv,x:e.x,y:e.y,d:e.d,ext:!0},"private"==e.type&&(u=["deriveKey","deriveBits"])}else{if(!r.isDefined(e.raw))throw"raw parameter is missing.";o=r.HSToAB(e.raw)}var s=new Promise(function(n,r){t.subtle.importKey(e.format,o,{name:"ECDH",namedCurve:e.crv},!0,u).then(function(o){t.subtle.exportKey("jwk",o).then(function(u){t.subtle.exportKey("raw",o).then(function(t){i.push({class:"ECDH",type:e.type,name:e.name,key:{publicKey:o},jwk:u,raw:t}),a(e.name)!=-1?n(e.name):r("key was not added to storage.")})})}).catch(function(e){throw r("error catched."),e})});return s.success=function(e){return s.then(function(n){e(n)}),s},s.error=function(e){return s.then(null,function(n){e(n)}),s},s},this.exportKey=function(e){if(r.isDefined(e.default)&&e.default){if(!r.isDefined(s))throw"default key is not defined.";e.name=s}if(!r.isDefined(e.name))throw"key name is required for exporting keys.";var n=a(e.name);if(n==-1)throw e.name,'" not found.';if(r.isDefined(e.type)||(e.type="raw"),"jwk"==e.type){if(r.isDefined(n.jwk))return n.jwk;throw e.name,'" cannot be exported.'}if("raw"==e.type){if(r.isDefined(n.raw))return r.ABToHS(new Uint8Array(n.raw));throw e.name,'" cannot be exported.'}throw"invalid export type"},this.deriveBits=function(e){if(!r.isDefined(e.name))throw"key name is required for deriving ECDH keys.";if(u(e.name)!=-1)throw e.name,'" already in use.';if(!r.isDefined(e.privateKeyName)||!r.isDefined(e.publicKeyName))throw"deriving keys require two previously stored keys.";var n=a(e.privateKeyName),i=a(e.publicKeyName);if(n==-1)throw e.privateKeyName,'" not found.';if(i==-1)throw e.publicKeyName,'" not found.';if("mixed"!=n.type){if("private"!=n.type)throw e.privateKeyName,'" is not a valid private key.';if("public"!=i.type)throw e.publicKeyName,'" is not a valid public key.'}r.isDefined(e.bits)||(e.bits=256),r.isDefined(e.format)||(e.format="HS"),r.isDefined(e.namedCurve)||(e.namedCurve="P-256");var o=new Promise(function(o,a){t.subtle.deriveBits({name:"ECDH",namedCurve:e.namedCurve,public:i.key.publicKey},n,e.bits).then(function(e){new Uint8Array(e);o(r.ABToHS(new Uint8Array(e)))}).catch(function(e){console.error("error deriving bits: ",e,"."),a(e)})});return o.success=function(e){return o.then(function(n){e(n)}),o},o.error=function(e){return o.then(null,function(n){e(n)}),o},o},this.deriveKey=function(e){if(!r.isDefined(e.name))throw"key name is required for deriving ECDH keys.";if(u(e.name)!=-1)throw e.name,'" already in use.';if(!r.isDefined(e.privateKeyName)||!r.isDefined(e.publicKeyName))throw"deriving keys require two previously stored keys.";var n=a(e.privateKeyName),i=a(e.publicKeyName);if(n==-1)throw e.privateKeyName,'" not found.';if(i==-1)throw e.publicKeyName,'" not found.';if("mixed"!=n.type){if("private"!=n.type)throw e.privateKeyName,'" is not a valid private key.';if("public"!=i.type)throw e.publicKeyName,'" is not a valid public key.'}r.isDefined(e.targetClass)||(e.targetClass="AES-GCM"),r.isDefined(e.targetLength)||(e.targetLength=256),r.isDefined(e.namedCurve)||(e.namedCurve="P-256"),r.isDefined(e.exportable)||(e.exportable=!1);var s=new Promise(function(a,s){t.subtle.deriveKey({name:"ECDH",namedCurve:e.namedCurve,public:i.key.publicKey},n.key.privateKey,{name:e.targetClass,length:e.targetLength},e.exportable,["encrypt","decrypt"]).then(function(n){n={publicKey:n},e.exportable?t.subtle.exportKey("jwk",n.publicKey).then(function(i){t.subtle.exportKey("raw",n.publicKey).then(function(t){o.push({class:e.targetClass,type:"private",name:e.name,key:n,jwk:i,raw:t}),u(e.name)!=-1?(r.isDefined(f)||(f=e.name),a(e.name)):s("key was not added to storage.")})}).catch(function(e){console.error("error exporting derived key: ",e,"."),s(e)}):(o.push({class:e.targetClass,type:"private",name:e.name,key:n,jwk:null,raw:null}),u(e.name)!=-1?(r.isDefined(f)||(f=e.name),a(e.name)):s("key was not added to storage."))}).catch(function(e){console.log("error deriving key: ",e,"."),s(e)})});return s.success=function(e){return s.then(function(n){e(n)}),s},s.error=function(e){return s.then(null,function(n){e(n)}),s},s},this.encrypt=function(e){if(r.isDefined(e.default)&&e.default){if(!r.isDefined(f))throw"default key is not defined.";e.name=f}if(!r.isDefined(e.name))throw"key name is required for deriving ECDH keys.";if(!r.isDefined(e.data))throw"data option must be defined and not null.";if(u(e.name)==-1)throw e.name,'" not found.';if("ECDH"==u(e.name).class)throw e.name,'" is not valid for encryption.';r.isDefined(e.tagLength)||(e.tagLength=128);var n=t.getRandomValues(new Uint8Array(12)),i=new Promise(function(i,o){t.subtle.encrypt({name:u(e.name).class,iv:n,tagLength:e.tagLength},u(e.name).key.publicKey,r.StringtoAB(e.data)).then(function(e){var t={encrypted:r.ABToHS(new Uint8Array(e)),iv:r.ABToHS(n)};i(t)})});return i.success=function(e){return i.then(function(n){e(n.encrypted,n.iv)}),i},i.error=function(e){return i.then(null,function(n){e(n)}),i},i},this.decrypt=function(e){if(r.isDefined(e.default)&&e.default){if(!r.isDefined(f))throw"default key is not defined.";e.name=f}if(!r.isDefined(e.name))throw"key name is required for decrypting.";if(!r.isDefined(e.iv))throw"the iv is required for decrypting.";if(!r.isDefined(e.data))throw"data option must be defined and not null.";if(u(e.name)==-1)throw e.name,'" not found.';if("ECDH"==u(e.name).class)throw e.name,'" is not valid for encryption.';r.isDefined(e.tagLength)||(e.tagLength=128);var n=new Promise(function(n,i){t.subtle.decrypt({name:u(e.name).class,iv:r.HSToAB(e.iv),tagLength:e.tagLength},u(e.name).key.publicKey,r.HSToAB(e.data)).then(function(e){data={decrypted:r.ABtoString(new Uint8Array(dec))},n(data)}).catch(function(e){i(e)})});return n.success=function(e){return n.then(function(n){e(n.decrypted)}),n},n.error=function(e){return n.then(null,function(n){e(n)}),n},n},this.$get=function(){return{tools:{ArrayBufferToHexString:function(e){return r.ABToHS(e)},HexStringToArrayBuffer:function(e){return r.HSToAB(e)},ArrayBufferToString:function(e){return r.ABtoString(e)},StringToArrayBuffer:function(e){return r.StringtoAB(e)}},deriveBits:function(e){},generate:function(e){return n.generateKey(e)},import:function(e){return n.importKey({name:r.ABToHS(t.getRandomValues(new Uint8Array(12))),raw:e})},importAndDeriveWithDefaultKey:function(e){var n=this,i=n.getDefaultKeys(),o=r.ABToHS(t.getRandomValues(new Uint8Array(12))),a=r.ABToHS(t.getRandomValues(new Uint8Array(12)));if(r.isDefined(i.ecdh)){var u=new Promise(function(t,r){n.importKey({name:o,raw:e}).success(function(e){n.deriveKey({name:a,privateKeyName:i.ecdh,publicKeyName:e}).success(function(e){t(e)})})});return u.success=function(e){return u.then(function(n){e(n)}),u},u.error=function(e){return u.then(null,function(n){e(n)}),u},u}console.error("No default ECDH key defined.")},importAndDerive:function(e,i){var o=n,a=r.ABToHS(t.getRandomValues(new Uint8Array(12))),u=r.ABToHS(t.getRandomValues(new Uint8Array(12))),s=new Promise(function(n,t){o.importKey({name:a,raw:i}).success(function(t){o.deriveKey({name:u,privateKeyName:e,publicKeyName:t}).success(function(e){n(e)})})});return s.success=function(e){return s.then(function(n){e(n)}),s},s.error=function(e){return s.then(null,function(n){e(n)}),s},s},export:function(e){return n.exportKey({name:e})},exportDefaultKey:function(){return n.exportKey({default:!0})},encrypt:function(e,t){return n.encrypt({name:e,data:t})},decrypt:function(e,t,r){return n.decrypt({name:e,data:t,iv:r})},encryptWithDefaultKey:function(e){return n.encrypt({default:!0,data:e})},decryptWithDefaultKey:function(e,t){return n.decrypt({default:!0,data:e,iv:t})}}}}]).factory("$httpCrypto",["$webCryptoProvider","$webCrypto","$http","$injector",function(e,n,t,r){var i=r.instantiate(NgWebCryptoUtils);return{post:function(n,r){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;if(!i.isDefined(n))return void console.error('please define "server" in the options.');if(i.isDefined(r)||(r={}),!i.isDefined(o)&&(o=e.getDefaultKeys().crypto,!i.isDefined(o)))return void console.error("default crypto key is not defined");if(!e.checkCryptoKey(o))return void console.error('key "',o,'" not found.');var a=JSON.stringify(r),u=new Promise(function(r,u){e.encrypt({name:o,data:a}).success(function(a,s){var f={data:a,iv:s};t.post(n,{d:a+"."+s}).success(function(n,t,a,s,c){if(!i.isDefined(n.d))return console.error("invalid crypto response from server."),void u(n);if(n.d.indexOf(".")==-1)return console.error("invalid crypto response from server."),void u(n);var d=n.d.split(".")[0],y=n.d.split(".")[1];e.decrypt({name:o,data:d,iv:y}).success(function(e){try{var n=JSON.parse(e)}catch(n){return console.error("decrypted response is not json."),void u(e)}resultObj={data:n,status:t,headers:a,config:s,statusText:c,encrypted:f},r(resultObj)}).error(function(e){resultObj={data:null,status:t,headers:a,config:s,statusText:c,encrypted:f},u(resultObj)})}).error(function(e,n,t,r,i){resultObj={data:null,status:n,headers:t,config:r,statusText:i,encrypted:f},u(resultObj)})}).error(function(e){resultObj={data:null,status:null,headers:null,config:config,statusText:null,encrypted:null},u(resultObj)})});return u.success=function(e){return u.then(function(n){e(n.data)}),u},u.error=function(e){return u.then(null,function(n){e(n)}),u},u}}}]);
//# sourceMappingURL=ng-web-crypto.es5.min.js.map
