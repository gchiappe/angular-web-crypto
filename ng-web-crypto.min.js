/*
ngWebCrypto
---
The MIT License (MIT)

Copyright ©2016 Giancarlo Chiappe Aguilar

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
---
©2016 Giancarlo Chiappe Aguilar <gchiappe@outlook.com.pe>
*/
var NgWebCryptoUtils=(function(){function NgWebCryptoUtils(){this.ABtoString=function(buffer){var str="";for(var iii=0;iii<buffer.byteLength;iii+=1){str+=String.fromCharCode(buffer[iii])}return str};this.StringtoAB=function(str){var bytes=new Uint8Array(str.length);for(var iii=0;iii<str.length;iii+=1){bytes[iii]=str.charCodeAt(iii)}return bytes};this.isFunction=function(obj){return!!(obj&&obj.constructor&&obj.call&&obj.apply)};this.isDefined=function(variable){if(typeof variable==='undefined'||variable===null){return false}return true};this.ABToHS=function(uint8arr){if(!uint8arr){return ''}var hexStr='';for(var i=0;i<uint8arr.length;i+=1){var hex=(uint8arr[i]&0xff).toString(16);hex=(hex.length===1)?'0'+hex:hex;hexStr+=hex}return hexStr.toUpperCase()};this.HSToAB=function(str){if(!str){return new Uint8Array()}var a=[];for(var i=0,len=str.length;i<len;i+=2){a.push(parseInt(str.substr(i,2),16))}return new Uint8Array(a)}}return NgWebCryptoUtils})();angular.module('ngWebCrypto',[]);angular.module('ngWebCrypto').factory('$webCryptoProvider',function($injector){var crypto=window.crypto;if(!crypto.subtle){console.error('ngWebCrypto: W3C WebCrypto API not supported in this browser. IE11 is not supported.');return}var tools=$injector.instantiate(NgWebCryptoUtils);var keys=[];var cryptoKeys=[];var getKey=function(kName){for(var c=0;c<keys.length;c+=1){if(keys[c].name==kName){return keys[c]}}return -1};var getCryptoKey=function(kName){for(var c=0;c<cryptoKeys.length;c+=1){if(cryptoKeys[c].name==kName){return cryptoKeys[c]}}return -1};var defaultKey=null,defaultCryptoKey=null;return{checkCryptoKey:function(kName){return getCryptoKey(kName)!=-1},checkKey:function(kName){return getKey(kName)!=-1},decrypt:function(options){if(tools.isDefined(options.default)){if(options.default){if(tools.isDefined(defaultCryptoKey)){options.name=defaultCryptoKey}}else{console.error('default key is not defined.');return}}if(!tools.isDefined(options.name)){console.error('key name is required for decrypting.');return}if(!tools.isDefined(options.iv)){console.error('the iv is required for decrypting.');return}if(!tools.isDefined(options.data)){console.error('data option must be defined and not null.');return}if(getCryptoKey(options.name)==-1){console.error('Key "',options.name,'" not found.');return}if(getCryptoKey(options.name).class=='ECDH'){console.error('Key "',options.name,'" is not valid for encryption.');return}if(!tools.isDefined(options.tagLength)){options.tagLength=128}var promise=new Promise(function(resolve,reject){crypto.subtle.decrypt({iv:tools.HSToAB(options.iv),name:getCryptoKey(options.name).class,tagLength:options.tagLength},getCryptoKey(options.name).key.publicKey,tools.HSToAB(options.data)).then(dec=>{data={decrypted:tools.ABtoString(new Uint8Array(dec))};resolve(data)}).catch(err=>{reject(err)})});promise.success=function(fn){promise.then(function(data){fn(data.decrypted)});return promise};promise.error=function(fn){promise.then(null,function(name){fn(name)});return promise};return promise},derive:function(options){if(!tools.isDefined(options.name)){console.error('key name is required for deriving ECDH keys.');return}if(getCryptoKey(options.name)!=-1){console.error('key name "',options.name,'" already in use.');return}if(!tools.isDefined(options.privateKeyName)||!tools.isDefined(options.publicKeyName)){console.error('deriving keys require two previously stored keys.');return}if(getKey(options.privateKeyName)==-1){console.error('private key "',options.privateKeyName,'" not found.');return}if(getKey(options.publicKeyName)==-1){console.error('public key "',options.publicKeyName,'" not found.');return}if(getKey(options.privateKeyName).type!='mixed'){if(getKey(options.privateKeyName).type!='private'){console.error('key "',options.privateKeyName,'" is not a valid private key.');return}if(getKey(options.publicKeyName).type!='public'){console.error('key "',options.publicKeyName,'" is not a valid public key.');return}}if(!tools.isDefined(options.targetClass)){options.targetClass='AES-GCM'}if(!tools.isDefined(options.targetLength)){options.targetLength=256}if(!tools.isDefined(options.namedCurve)){options.namedCurve='P-256'}if(!tools.isDefined(options.exportable)){options.exportable=false}var promise=new Promise(function(resolve,reject){crypto.subtle.deriveKey({name:'ECDH',namedCurve:options.namedCurve,public:getKey(options.publicKeyName).key.publicKey},getKey(options.privateKeyName).key.privateKey,{length:options.targetLength,name:options.targetClass},options.exportable,['encrypt','decrypt']).then(key=>{key={publicKey:key};if(options.exportable){var gRaw,gJwk;crypto.subtle.exportKey('jwk',key.publicKey).then(eJwk=>{gJwk=eJwk;crypto.subtle.exportKey('raw',key.publicKey).then(eRaw=>{gRaw=eRaw;cryptoKeys.push({class:options.targetClass,jwk:gJwk,key:key,name:options.name,raw:gRaw,type:'private'});if(getCryptoKey(options.name)!=-1){if(!tools.isDefined(defaultCryptoKey)){defaultCryptoKey=options.name}resolve(options.name)}else{reject('key was not added to storage.')}})}).catch(function(err){console.error('error exporting derived key: ',err,'.');reject(err)})}else{cryptoKeys.push({class:options.targetClass,jwk:null,key:key,name:options.name,raw:null,type:'private'});if(getCryptoKey(options.name)!=-1){if(!tools.isDefined(defaultCryptoKey)){defaultCryptoKey=options.name}resolve(options.name)}else{reject('key was not added to storage.')}}}).catch(err=>{console.log('error deriving key: ',err,'.');reject(err)})});promise.success=function(fn){promise.then(function(name){fn(name)});return promise};promise.error=function(fn){promise.then(null,function(name){fn(name)});return promise};return promise},encrypt:function(options){if(tools.isDefined(options.default)){if(options.default){if(tools.isDefined(defaultCryptoKey)){options.name=defaultCryptoKey}}else{console.error('default key is not defined.');return}}if(!tools.isDefined(options.name)){console.error('key name is required for deriving ECDH keys.');return}if(!tools.isDefined(options.data)){console.error('data option must be defined and not null.');return}if(getCryptoKey(options.name)==-1){console.error('Key "',options.name,'" not found.');return}if(getCryptoKey(options.name).class=='ECDH'){console.error('Key "',options.name,'" is not valid for encryption.');return}if(!tools.isDefined(options.tagLength)){options.tagLength=128}var encIV=crypto.getRandomValues(new Uint8Array(12));var promise=new Promise(function(resolve,reject){crypto.subtle.encrypt({iv:encIV,name:getCryptoKey(options.name).class,tagLength:options.tagLength},getCryptoKey(options.name).key.publicKey,tools.StringtoAB(options.data)).then(function(encrypted){var data={encrypted:tools.ABToHS(new Uint8Array(encrypted)),iv:tools.ABToHS(encIV)};resolve(data)})});promise.success=function(fn){promise.then(function(data){fn(data.encrypted,data.iv)});return promise};promise.error=function(fn){promise.then(null,function(name){fn(name)});return promise};return promise},exportKey:function(options){if(tools.isDefined(options.default)){if(options.default){if(tools.isDefined(defaultKey)){options.name=defaultKey}}else{console.error('default key is not defined.');return}}if(!tools.isDefined(options.name)){console.error('key name is required for exporting keys.');return}if(getKey(options.name)==-1){console.error('Key "',options.name,'" not found.');return}if(!tools.isDefined(options.type)){options.type='raw'}if(options.type=='jwk'){if(tools.isDefined(getKey(options.name).jwk)){return getKey(options.name).jwk}else{console.error('the key "',options.name,'" cannot be exported.');return}}else if(options.type=='raw'){if(tools.isDefined(getKey(options.name).raw)){return tools.ABToHS(new Uint8Array(getKey(options.name).raw))}else{console.error('the key "',options.name,'" cannot be exported.');return}}else{console.error('invalid export type');return}},generateKey:function(options){if(tools.isDefined(options.random)){if(options.random){options.name=tools.ABToHS(crypto.getRandomValues(new Uint8Array(12)))}}if(!tools.isDefined(options.name)){console.error('key name is required for generating.');return}if(getKey(options.name)!=-1){console.error('key name "',options.name,'" already in use.');return}if(!tools.isDefined(options.namedCurve)){options.namedCurve='P-256'}if(!tools.isDefined(options.type)){options.type='private'}if(!(options.type=='private'||options.type=='public'||options.type=='mixed')){console.error('invalid key type (private, public, mixed).');return}var promise=new Promise(function(resolve,reject){crypto.subtle.generateKey({name:'ECDH',namedCurve:options.namedCurve},true,['deriveKey','deriveBits']).then(key=>{var gRaw,gJwk;crypto.subtle.exportKey('jwk',key.publicKey).then(eJwk=>{gJwk=eJwk;crypto.subtle.exportKey('raw',key.publicKey).then(eRaw=>{gRaw=eRaw;keys.push({class:'ECDH',jwk:gJwk,key:key,name:options.name,raw:gRaw,type:options.type});if(getKey(options.name)!=-1){if(!tools.isDefined(defaultKey)){defaultKey=options.name}resolve(options.name)}else{reject('key was not added to storage.')}})})}).catch(function(err){reject(err)})});promise.success=function(fn){promise.then(function(name){fn(name)});return promise};promise.error=function(fn){promise.then(null,function(name){fn(name)});return promise};return promise},getDefaultKeys:function(){return{crypto:defaultCryptoKey,ecdh:defaultKey}},importKey:function(options){if(!tools.isDefined(options.name)){console.error('key name is required for importing.');return}if(getKey(options.name)!=-1){console.error('key name "',options.name,'" already in use.');return}if(!tools.isDefined(options.crv)){options.crv='P-256'}if(!tools.isDefined(options.format)){options.format='raw'}if(!tools.isDefined(options.type)){options.type='public'}var importDataObj;var keyCapabilities=[];if(options.format=='jwk'){if(!tools.isDefined(options.x)||!tools.isDefined(options.y)||!tools.isDefined(options.d)){console.error('x, y and d parameters are required to import an ECDH key.');return}importDataObj={crv:options.crv,d:options.d,ext:true,kty:'EC',x:options.x,y:options.y};if(options.type=='private'){keyCapabilities=['deriveKey','deriveBits']}}else{if(!tools.isDefined(options.raw)){console.error('raw parameter is missing.');return}importDataObj=tools.HSToAB(options.raw)}var promise=new Promise(function(resolve,reject){crypto.subtle.importKey(options.format,importDataObj,{name:'ECDH',namedCurve:options.crv},true,keyCapabilities).then(key=>{var gRaw,gJwk;crypto.subtle.exportKey('jwk',key).then(eJwk=>{gJwk=eJwk;crypto.subtle.exportKey('raw',key).then(eRaw=>{gRaw=eRaw;keys.push({class:'ECDH',jwk:gJwk,key:{publicKey:key},name:options.name,raw:gRaw,type:options.type});if(getKey(options.name)!=-1){resolve(options.name)}else{reject('key was not added to storage.')}})})}).catch(err=>{console.error('error importing key: ',err,' check the input options.');reject('error catched.')})});promise.success=function(fn){promise.then(function(name){fn(name)});return promise};promise.error=function(fn){promise.then(null,function(name){fn(name)});return promise};return promise}}}).factory('$webCrypto',function($webCryptoProvider,$injector){var tools=$injector.instantiate(NgWebCryptoUtils);return{decrypt:function(name,data,iv){return $webCryptoProvider.decrypt({data:data,iv:iv,name:name})},decryptWithDefaultKey:function(data,iv){return $webCryptoProvider.decrypt({data:data,default:true,iv:iv})},encrypt:function(name,data){return $webCryptoProvider.encrypt({data:data,name:name})},encryptWithDefaultKey:function(data){return $webCryptoProvider.encrypt({data:data,default:true})},export:function(name){return $webCryptoProvider.exportKey({name:name})},exportDefaultKey:function(){return $webCryptoProvider.exportKey({default:true})},import:function(raw){var newName=tools.ABToHS(crypto.getRandomValues(new Uint8Array(12)));return $webCryptoProvider.importKey({name:newName,raw:raw})},importAndDerive:function(name,raw){var importName=tools.ABToHS(crypto.getRandomValues(new Uint8Array(12)));var rsaKeyName=tools.ABToHS(crypto.getRandomValues(new Uint8Array(12)));var promise=new Promise(function(resolve,reject){$webCryptoProvider.importKey({name:importName,raw:raw}).success(function(importedKeyName){$webCryptoProvider.derive({name:rsaKeyName,privateKeyName:name,publicKeyName:importedKeyName}).success(function(derivedKeyName){resolve(derivedKeyName)})})});promise.success=function(fn){promise.then(function(data){fn(data)});return promise};promise.error=function(fn){promise.then(null,function(name){fn(name)});return promise};return promise},importAndDeriveWithDefaultKey:function(raw){var defKeys=$webCryptoProvider.getDefaultKeys();var importName=tools.ABToHS(crypto.getRandomValues(new Uint8Array(12)));var rsaKeyName=tools.ABToHS(crypto.getRandomValues(new Uint8Array(12)));if(tools.isDefined(defKeys.ecdh)){var promise=new Promise(function(resolve,reject){$webCryptoProvider.importKey({name:importName,raw:raw}).success(function(importedKeyName){$webCryptoProvider.derive({name:rsaKeyName,privateKeyName:defKeys.ecdh,publicKeyName:importedKeyName}).success(function(derivedKeyName){resolve(derivedKeyName)})})});promise.success=function(fn){promise.then(function(data){fn(data)});return promise};promise.error=function(fn){promise.then(null,function(name){fn(name)});return promise};return promise}else{console.error('No default ECDH key defined.')}},tools:{ArrayBufferToHexString:function(ab){return tools.ABToHS(ab)},ArrayBufferToString:function(ab){return tools.ABtoString(ab)},HexStringToArrayBuffer:function(hs){return tools.HSToAB(hs)},StringToArrayBuffer:function(str){return tools.StringtoAB(str)}}}}).factory('$httpCrypto',function($webCryptoProvider,$webCrypto,$http,$injector){var tools=$injector.instantiate(NgWebCryptoUtils);return{post:function(server,data,key=null){if(!tools.isDefined(server)){console.error('please define "server" in the options.');return}if(!tools.isDefined(data)){data={}}if(!tools.isDefined(key)){key=$webCryptoProvider.getDefaultKeys().crypto;if(!tools.isDefined(key)){console.error('default crypto key is not defined');return}}if(!$webCryptoProvider.checkCryptoKey(key)){console.error('key "',key,'" not found.');return}var ucdata_str=JSON.stringify(data);var promise=new Promise((resolve,reject)=>{$webCryptoProvider.encrypt({data:ucdata_str,name:key}).success((encrypted,iv)=>{var encData={data:encrypted,iv:iv};$http.post(server,{d:encrypted+'.'+iv}).success((rdata,status,headers,config,statusText)=>{if(!tools.isDefined(rdata.d)){console.error('invalid crypto response from server.');reject(rdata);return}if(rdata.d.indexOf(".")==-1){console.error('invalid crypto response from server.');reject(rdata);return}var rdatao=rdata.d.split('.')[0];var rivo=rdata.d.split('.')[1];$webCryptoProvider.decrypt({data:rdatao,iv:rivo,name:key}).success(decrypted=>{try{var parsed=JSON.parse(decrypted)}catch(e){console.error('decrypted response is not json.');reject(decrypted);return}resultObj={config:config,data:parsed,encrypted:encData,headers:headers,status:status,statusText:statusText};resolve(resultObj)}).error(err=>{resultObj={config:config,data:null,encrypted:encData,headers:headers,status:status,statusText:statusText};reject(resultObj)})}).error((rdata,status,headers,config,statusText)=>{resultObj={config:config,data:null,encrypted:encData,headers:headers,status:status,statusText:statusText};reject(resultObj)})}).error(err=>{resultObj={config:config,data:null,encrypted:null,headers:null,status:null,statusText:null};reject(resultObj)})});promise.success=function(fn){promise.then(function(p){fn(p.data)});return promise};promise.error=function(fn){promise.then(null,function(name){fn(name)});return promise};return promise}}});